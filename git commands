Here’s a quick guide to the most commonly used **Git** and **GitHub** commands. These commands help with managing repositories, committing changes, and collaborating on GitHub.

### Basic Git Commands

1. **Clone a repository**
   ```bash
   git clone <repository-url>
   ```
   This command downloads a Git repository from GitHub to your local machine.

2. **Check the status of your repo**
   ```bash
   git status
   ```
   Displays the status of your working directory, including modified, added, or untracked files.

3. **Stage changes for commit**
   ```bash
   git add <file>    # Add specific file(s)
   git add .          # Add all changes in the directory
   ```
   Stages the modified files for committing.

4. **Commit changes**
   ```bash
   git commit -m "Your commit message"
   ```
   Commits the staged changes to your local repository with a descriptive message.

5. **Push changes to GitHub**
   ```bash
   git push origin <branch-name>
   ```
   Pushes committed changes to a remote repository on GitHub (replace `<branch-name>` with the branch you're working on, e.g., `main` or `master`).

6. **Pull changes from GitHub**
   ```bash
   git pull origin <branch-name>
   ```
   Fetches and merges changes from a remote repository into your local branch.

7. **Create a new branch**
   ```bash
   git checkout -b <new-branch-name>
   ```
   Creates and switches to a new branch in your local repository.

8. **Switch branches**
   ```bash
   git checkout <branch-name>
   ```
   Switches to an existing branch in your repository.

9. **Merge branches**
   ```bash
   git merge <branch-name>
   ```
   Merges the specified branch into your current branch.

10. **View the commit history**
    ```bash
    git log
    ```
    Shows the commit history of your repository.

11. **Delete a branch locally**
    ```bash
    git branch -d <branch-name>
    ```
    Deletes a local branch (only if it’s already merged).

12. **Delete a branch remotely**
    ```bash
    git push origin --delete <branch-name>
    ```
    Deletes a branch on GitHub (remote).

13. **View changes made**
    ```bash
    git diff
    ```
    Shows the differences between the working directory and the last commit.

14. **Revert a commit**
    ```bash
    git revert <commit-hash>
    ```
    Creates a new commit that undoes the changes from a specified commit.

15. **Stash changes (temporarily save changes)**
    ```bash
    git stash
    ```
    Stashes your local modifications temporarily to switch branches or pull without committing.

---

### GitHub-Specific Commands (via Git)

GitHub doesn’t have its own command-line interface beyond Git, but here are some useful commands for interacting with GitHub repositories:

1. **Fork a repository**
   - Navigate to the GitHub repository page and click the "Fork" button on the top right to create your own copy of the repository.

2. **Create a Pull Request (PR)**  
   After pushing changes to your branch on GitHub, you can open a pull request to propose changes from your fork to the original repository.

   - Go to the "Pull Requests" tab on GitHub and click "New Pull Request."
   - Select the branch and repo to compare with, add a description, and create the PR.

3. **Sync Forked Repo**
   If you have a forked repository and want to sync it with the original:
   - Add the original repo as an upstream remote:
     ```bash
     git remote add upstream <original-repo-url>
     ```
   - Fetch changes from the upstream:
     ```bash
     git fetch upstream
     ```
   - Merge changes from the upstream main branch:
     ```bash
     git checkout main
     git merge upstream/main
     ```

4. **GitHub Actions (CI/CD)**  
   To trigger GitHub Actions workflows, you generally need to interact with `.github/workflows/` and push changes that trigger your CI/CD pipelines. For example:
   - Pushing a change to your `main` branch may automatically trigger a build or deploy pipeline configured with GitHub Actions.

5. **View and manage issues**
   - To create a new issue via the GitHub web interface, go to the "Issues" tab and click "New Issue."

---

### Additional Tips

- **Git Help**
   ```bash
   git help <command>
   ```
   Provides detailed information about any Git command. For example: `git help commit`.

- **GitHub CLI**  
   GitHub has its own command-line interface (`gh`), which allows you to interact with GitHub more directly (e.g., create issues, pull requests, etc.) from your terminal.
   ```bash
   gh pr create    # Create a pull request
   gh repo fork    # Fork a repo
   ```

Let me know if you'd like more detailed examples or explanations on any of these commands!
